{"version":3,"file":"angular-imask.mjs","sources":["../../src/imask-factory.ts","../../src/imask.directive.ts","../../src/imask.pipe.ts","../../src/default-imask-factory.ts","../../src/directive.module.ts","../../src/imask.module.ts","../../src/angular-imask.ts"],"sourcesContent":["import IMask from 'imask';\nimport { Injectable } from '@angular/core';\n\n\n@Injectable({ providedIn: 'root' })\nexport abstract class IMaskFactory {\n    abstract create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts): IMask.InputMask<Opts>\n}\n","import IMask from 'imask';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  Directive, ElementRef, Input, Output, forwardRef, Provider, Renderer2,\n  EventEmitter, OnDestroy, OnChanges, AfterViewInit,\n  Optional, Inject, SimpleChanges, PLATFORM_ID\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\nimport { IMaskFactory } from './imask-factory';\n\n\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => IMaskDirective),\n  multi: true\n};\n\nconst DEFAULT_IMASK_ELEMENT = (elementRef: any) => elementRef.nativeElement;\n@Directive({\n  selector: '[imask]',\n  exportAs: 'imask',\n  host: {\n    '(input)': '_handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '_compositionStart()',\n    '(compositionend)': '_compositionEnd($event.target.value)'\n  },\n  providers: [MASKEDINPUT_VALUE_ACCESSOR],\n})\nexport class IMaskDirective<Opts extends IMask.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\n  maskRef?: IMask.InputMask<Opts>;\n  onTouched: any;\n  onChange: any;\n  private _viewInitialized: boolean;\n  private _composing: boolean;\n  private _writingValue: any;\n  private _writing: boolean;\n\n  @Input() imask?: Opts;\n  @Input() unmask?: boolean|'typed';\n  @Input() imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\n  @Output() accept: EventEmitter<any>;\n  @Output() complete: EventEmitter<any>;\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              private _factory: IMaskFactory,\n              @Inject(PLATFORM_ID) private _platformId: string,\n              @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\n    // init here to support AOT (TODO may be will work with ng-packgr - need to check)\n    this.onTouched = () => {};\n    this.onChange = () => {};\n    this.imaskElement = DEFAULT_IMASK_ELEMENT;\n    this.accept = new EventEmitter();\n    this.complete = new EventEmitter();\n    this._viewInitialized = false;\n    this._composing = false;\n    this._writing = false;\n\n    if (this._compositionMode == null) {\n      this._compositionMode = !this._isAndroid();\n    }\n  }\n\n  get element () {\n    return this.imaskElement(this._elementRef, this);\n  }\n\n  get maskValue (): any {\n    if (!this.maskRef) return this.element.value;\n\n    if (this.unmask === 'typed') return this.maskRef.typedValue;\n    if (this.unmask) return this.maskRef.unmaskedValue;\n    return this.maskRef.value;\n  }\n\n  set maskValue (value: any) {\n    if (this.maskRef) {\n      if (this.unmask === 'typed') this.maskRef.typedValue = value;\n      else if (this.unmask) this.maskRef.unmaskedValue = value;\n      else this.maskRef.value = value;\n    } else {\n      this._renderer.setProperty(this.element, 'value', value);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.imask) this.initMask();\n\n    this._viewInitialized = true;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.elementRef && !this.imaskElement) this.imaskElement = DEFAULT_IMASK_ELEMENT;\n\n    if (!changes.imask || !this._viewInitialized) return;\n\n    if (this.imask) {\n      if (this.maskRef) this.maskRef.updateOptions(this.imask);\n      else {\n        this.initMask();\n        this.onChange(this.maskValue);\n      }\n    } else {\n      this.destroyMask();\n    }\n  }\n\n  destroyMask () {\n    if (this.maskRef) {\n      this.maskRef.destroy();\n      delete this.maskRef;\n    }\n  }\n\n  ngOnDestroy () {\n    this.destroyMask();\n    this.accept.complete();\n    this.complete.complete();\n  }\n\n  beginWrite (value: any): void {\n    this._writing = true;\n    this._writingValue = value;\n  }\n\n  endWrite (): any {\n    this._writing = false;\n    return this._writingValue;\n  }\n\n  writeValue(value: any) {\n    value = value == null && this.unmask !== 'typed' ? '' : value;\n\n    if (this.maskRef) {\n      this.beginWrite(value);\n      this.maskValue = value;\n      this.endWrite();\n    } else {\n      this._renderer.setProperty(this.element, 'value', value);\n    }\n  }\n\n  _onAccept () {\n    const value = this.maskValue;\n    // if value was not changed during writing don't fire events\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/136\n    if (this._writing && value === this.endWrite()) return;\n    this.onChange(value);\n    this.accept.emit(value);\n  }\n\n  _onComplete () {\n    this.complete.emit(this.maskValue);\n  }\n\n  private initMask () {\n    this.maskRef = this._factory.create(this.element, this.imask as Opts)\n      .on('accept', this._onAccept.bind(this))\n      .on('complete', this._onComplete.bind(this));\n  }\n\n  setDisabledState (isDisabled: boolean) {\n    this._renderer.setProperty(this.element, 'disabled', isDisabled)\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\n\n  _handleInput(value: any): void {\n    // if mask is attached all input goes throw mask\n    if (this.maskRef) return;\n\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n\n  _compositionStart(): void { this._composing = true; }\n\n  _compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this._handleInput(value);\n  }\n\n  private _isAndroid(): boolean {\n    return isPlatformBrowser(this._platformId) && /android (\\d+)/.test(navigator.userAgent.toLowerCase());\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { pipe } from 'imask';\nexport { PIPE_TYPE, pipe } from 'imask';\n\n\n/*\n * Transforms value through mask\n * Takes mask and optionally `from` and `to` pipe types.\n * Usage:\n *   value | imask:MASK_OR_MASKED:opt_from:opt_to\n * Example:\n *   {{ 2 | imask:mask }}\n*/\n@Pipe({name: 'imask'})\nexport class IMaskPipe implements PipeTransform {\n  transform (...args: Parameters<typeof pipe>): ReturnType<typeof pipe> {\n    return pipe(...args);\n  }\n}\n","import IMask from 'imask';\nimport { Injectable } from '@angular/core';\nimport { IMaskFactory } from './imask-factory';\n\n\n@Injectable({ providedIn: 'root' })\nexport class DefaultImaskFactory implements IMaskFactory {\n    create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts) {\n        return IMask(el, opts);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IMaskDirective } from './imask.directive';\nimport { IMaskFactory } from './imask-factory';\nimport { DefaultImaskFactory } from './default-imask-factory';\n\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [IMaskDirective],\n  providers: [{provide: IMaskFactory, useClass: DefaultImaskFactory}],\n  exports: [IMaskDirective]\n})\nexport class IMaskDirectiveModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IMaskPipe } from './imask.pipe';\nimport { IMaskDirectiveModule } from './directive.module';\n\n@NgModule({\n  imports: [CommonModule, IMaskDirectiveModule],\n  declarations: [IMaskPipe],\n  exports: [IMaskPipe, IMaskDirectiveModule]\n})\nexport class IMaskModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.IMaskFactory"],"mappings":"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"}